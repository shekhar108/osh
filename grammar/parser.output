Terminals which are not used

   BLANK
   ID


Grammar

    0 $accept: prog $end

    1 prog: prog expr EOL
    2     | expr EOL

    3 expr: INT
    4     | expr ADD INT
    5     | expr SUB INT


Terminals, with rules where they appear

$end (0) 0
error (256)
BLANK (258)
ID (259)
INT (260) 3 4 5
EOL (261) 1 2
ADD (262) 4
SUB (263) 5


Nonterminals, with rules where they appear

$accept (9)
    on left: 0
prog (10)
    on left: 1 2, on right: 0 1
expr (11)
    on left: 3 4 5, on right: 1 2 4 5


state 0

    0 $accept: . prog $end

    INT  shift, and go to state 1

    prog  go to state 2
    expr  go to state 3


state 1

    3 expr: INT .

    $default  reduce using rule 3 (expr)


state 2

    0 $accept: prog . $end
    1 prog: prog . expr EOL

    $end  shift, and go to state 4
    INT   shift, and go to state 1

    expr  go to state 5


state 3

    2 prog: expr . EOL
    4 expr: expr . ADD INT
    5     | expr . SUB INT

    EOL  shift, and go to state 6
    ADD  shift, and go to state 7
    SUB  shift, and go to state 8


state 4

    0 $accept: prog $end .

    $default  accept


state 5

    1 prog: prog expr . EOL
    4 expr: expr . ADD INT
    5     | expr . SUB INT

    EOL  shift, and go to state 9
    ADD  shift, and go to state 7
    SUB  shift, and go to state 8


state 6

    2 prog: expr EOL .

    $default  reduce using rule 2 (prog)


state 7

    4 expr: expr ADD . INT

    INT  shift, and go to state 10


state 8

    5 expr: expr SUB . INT

    INT  shift, and go to state 11


state 9

    1 prog: prog expr EOL .

    $default  reduce using rule 1 (prog)


state 10

    4 expr: expr ADD INT .

    $default  reduce using rule 4 (expr)


state 11

    5 expr: expr SUB INT .

    $default  reduce using rule 5 (expr)
